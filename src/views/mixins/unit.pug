- const imageUrlBase = 'https://mustadio-images.s3.amazonaws.com';

mixin unitPortrait(className, gender, team, side)
    - const teamString = team === 'champion' ? '' : `_${team.replace(/^\w/, c => c.toUpperCase())}`;
    - const fileName = gender === 'Monster' ? className : (className + gender.charAt(0) + teamString);
    img(class=`unit-portrait-${side}` src=`${imageUrlBase}/units/${fileName}.gif`)

mixin compat(unit, team, side, word)
    each u in team.Units
        +compareCompat(unit, u, side, word)

mixin compareCompat(unit, unit2, side, word)
    if (unit.zodiac === 'Capricorn')
        +zodiacCompare(unit, unit2, side, word, 'Cancer', 'Tarus', 'Virgo', 'Libra', 'Aries')  
    if (unit.zodiac === 'Aquarius')
        +zodiacCompare(unit, unit2, side, word, 'Leo', 'Gemini', 'Libra', 'Taurus', 'Scorpio')
    if (unit.zodiac === 'Pisces')
        +zodiacCompare(unit, unit2, side, word, 'Virgo', 'Cancer', 'Scorpio', 'Sagittarius', 'Gemini')  
    if (unit.zodiac === 'Aries')
        +zodiacCompare(unit, unit2, side, word, 'Libra', 'Sagittarius', 'Leo', 'Cancer', 'Capricorn')
    if (unit.zodiac === 'Taurus')
        +zodiacCompare(unit, unit2, side, word, 'Scorpio', 'Virgo', 'Capricorn', 'Leo', 'Aquarius')  
    if (unit.zodiac === 'Gemini')
        +zodiacCompare(unit, unit2, side, word, 'Sagittarius', 'Libra', 'Aquarius', 'Virgo', 'Pisces')
    if (unit.zodiac === 'Cancer')
        +zodiacCompare(unit, unit2, side, word, 'Capricorn', 'Scorpio', 'Leo', 'Libra', 'Aries')  
    if (unit.zodiac === 'Leo')
        +zodiacCompare(unit, unit2, side, word, 'Aquarius', 'Sagittarius', 'Aries', 'Scorpio', 'Taurus')
    if (unit.zodiac === 'Virgo')
        +zodiacCompare(unit, unit2, side, word, 'Pisces', 'Capricorn', 'Taurus', 'Sagittarius', 'Gemini')  
    if (unit.zodiac === 'Libra')
        +zodiacCompare(unit, unit2, side, word, 'Aries', 'Aquarius', 'Gemini', 'Capricorn', 'Cancer')
    if (unit.zodiac === 'Scorpio')
        +zodiacCompare(unit, unit2, side, word, 'Taurus', 'Pisces', 'Cancer', 'Aquarius', 'Leo')  
    if (unit.zodiac === 'Sagittarius')
        +zodiacCompare(unit, unit2, side, word, 'Gemini', 'Aries', 'Leo', 'Pisces', 'Virgo')
    if (unit.zodiac === 'Serpentarius') 
        +tooltip(side, `Zodiac compatibility with ${word}. 1 = worst, 2 = bad, 3 = neutral, 4 = good, 5 = best`)
            img.compat-icon(src=`${imageUrlBase}/zodiac/3star.png`)
            br 

mixin zodiacCompare(unit1, unit2, side, word, bestworst, good1, good2, bad1, bad2)
    - var star = 3
    if (unit2.zodiac === bestworst)
        if (unit1.gender === 'Monster' || unit2.gender === 'Monster')
            -star = 2
        else
            if  (unit1.gender === unit2.gender)
                -star = 1
            else
                -star = 5
    if (unit2.zodiac === good1 || unit2.zodiac === good2)
        -star = 4
    if (unit2.zodiac === bad1 || unit2.zodiac === bad2)
        -star = 2
    +tooltip(side, `Zodiac compatibility with ${word}. 1 = worst, 2 = bad, 3 = neutral, 4 = good, 5 = best`)
        img.compat-icon(src=`${imageUrlBase}/zodiac/${star}star.png`)
        br 


mixin zodiacIcon(zodiac, tooltipSide)
    +tooltip(tooltipSide, 'Same shape = min/max; Same color = good; Same pattern = bad')
        img(class=`zodiac-icon` src=`${imageUrlBase}/zodiac/${zodiac.toLowerCase()}.png`)

mixin unitStats(totalStats, tooltipSide)
    .d-flex.flex-column
        div= `HP: ${totalStats.hp} / MP: ${totalStats.mp}`
        div= `Speed: ${totalStats.speed}`
        div= `Move: ${totalStats.move} / Jump: ${totalStats.jump}`
        div= `PA: ${totalStats.pa} / MA: ${totalStats.ma}`
        div= "Evasion:"
        ul
            li= `C-EV ${totalStats.cEvPercent}%`
            li= `S-EV ${totalStats.sPhysEvPercent}% / ${totalStats.sMagEvPercent}%`
            li= `A-EV ${totalStats.aPhysEvPercent}% / ${totalStats.aMagEvPercent}%`
        if (totalStats.initialStatuses && totalStats.initialStatuses.length > 0)
            div= "Initial:"
            ul
                each status in totalStats.initialStatuses
                    li
                        +tooltip(tooltipSide, statuses[status] && statuses[status].info)
                            div= status
        if (totalStats.permStatuses && totalStats.permStatuses.length > 0)
            div= "Permanent:"
            ul
                each status in totalStats.permStatuses
                    li
                        +tooltip(tooltipSide, statuses[status] && statuses[status].info)
                            div= status

mixin tooltip(tooltipSide, tooltipText)
    div(data-toggle="tooltip" data-placement=tooltipSide, title=tooltipText)
        block

mixin tooltippedStatus(tooltipSide, status)
    +tooltip(tooltipSide, status.info)
        .d-inline-flex.align-items-center
            img.ability-icon(src=`${imageUrlBase}/icons/status.png`)
            div= status.name

mixin tooltippedAbility(tooltipSide, ability)
    - const abilityNameDisplay = ability.length > 0 ? ability : '(none)';
    - const abilityInfo = abilities[ability.replace('*', '')] || { name: ability, info: '' };
    - const beastmasterSide = tooltipSide === 'left' ? 'right' : 'left';
    - const clazz = notables.abilities.has(ability) ? 'notable' : '';
    +tooltip(tooltipSide, abilityInfo.info)
        if (ability.includes('*'))
            +tooltip(beastmasterSide, 'Beastmaster Required')
                div(class=clazz)= abilityNameDisplay
        else
            div(class=clazz)= abilityNameDisplay
    

mixin tooltippedAbilityWithSlot(tooltipSide, slot, ability)
    - const abilityNameDisplay = ability.length > 0 ? ability : '(none)';
    - const abilityInfo = abilities[ability] || { name: ability, info: '' };
    - const clazz = notables.abilities.has(ability) ? 'notable' : '';
    +tooltip(tooltipSide, abilityInfo.info)
        .d-inline-flex.align-items-center
            img.ability-icon(src=`${imageUrlBase}/icons/${slot}.png`)
            div(class=clazz)= abilityNameDisplay

mixin tooltippedItem(tooltipSide, gear)
    - const gearInfo = items[gear.name] || { name: gear.name, info: '', slot: '' };
    - const clazz = notables.items.has(gear.name) ? 'notable' : '';
    +tooltip(tooltipSide, gearInfo.info)
        .d-inline-flex.align-items-center
            img.ability-icon(src=`${imageUrlBase}/icons/${gearInfo.slot}.png`)
            img.gear-icon(src=`${imageUrlBase}/items/${gearInfo.name.replace(' ', '+')}.png`)
            span(class=clazz)= gearInfo.name

mixin unit(side, unit, team, team2)
    - const tooltipSide = side === 'left' ? 'right' : 'left';
    - const spacelessClassName = unit.class.replace(' ', '');
    - const className = spacelessClassName.startsWith('Calculator') ? 'Calculator' : spacelessClassName;
    - const unitClassInfo = classes[className][unit.gender]
    - const unitItems = unit.UnitEquipments.map((e) => items[e.name]);
    - const totalStats = stats.totalStatsForClassAndEquipment(classes[className][unit.gender].baseStats, unitItems, unit.moveSkill);
    - const activeInnates = unitClassInfo.innates.filter((innate) => innate === 'Jump' || !abilities[innate] && !statuses[innate]);
    - const nonActiveInnates = unitClassInfo.innates.filter((innate) => !statuses[innate] && abilities[innate] && abilities[innate].type !== 'active');
    - const innateStatuses = unitClassInfo.innates.filter((innate) => innate !== 'Jump' && statuses[innate]);
    tr.unit-row
        td
            .d-flex.flex-column
                a(href=`https://fftbg.bryanching.net/player/${unit.name}`)= unit.name
                div= unit.gender
                div
                    - const bClass = notables.brave(unit.brave) ? 'notable' : '';
                    - const fClass = notables.faith(unit.faith) ? 'notable' : '';
                    span(class=bClass)= `B: ${unit.brave}`
                    span= " / "
                    span(class=fClass)= `F: ${unit.faith}`
                +tooltip(tooltipSide, unitClassInfo.raw)
                    div.font-weight-bold= unit.class
                +tooltip(tooltipSide, zodiacs.getZodiac(unit.zodiac.toLowerCase()).info)
                    div= unit.zodiac
                table(class="unit-portrait-table")
                    tr
                        td
                            if (side === 'left')
                                +compat(unit, team, side, 'allies')
                            else
                                +compat(unit, team2, 'left', 'enemies')  
                        td
                            +unitPortrait(className, unit.gender, team.name, side)
                            +zodiacIcon(unit.zodiac, tooltipSide)
                        td
                            if (side === 'right')
                                +compat(unit, team, side, 'allies')
                            else
                                +compat(unit, team2, 'right', 'enemies') 
                
        td
            +unitStats(totalStats, tooltipSide)
        td
            .d-flex.flex-column
            each gear in unit.UnitEquipments
                +tooltippedItem(tooltipSide, gear)
        td
            .d-flex.flex-column
                if unit.gender !== 'Monster'
                    if activeInnates.length > 0
                        each innate in activeInnates
                            +tooltippedAbilityWithSlot(tooltipSide, 'active', innate)
                    +tooltippedAbilityWithSlot(tooltipSide, 'active', unit.subSkill)
                    +tooltippedAbilityWithSlot(tooltipSide, 'react', unit.reactSkill)
                    +tooltippedAbilityWithSlot(tooltipSide, 'support', unit.supportSkill)
                    +tooltippedAbilityWithSlot(tooltipSide, 'move', unit.moveSkill)
                if nonActiveInnates.length > 0 || innateStatuses.length > 0
                    div.font-weight-bold= "Innates:"
                    each innate in nonActiveInnates
                        - const innateAbilityType = abilities[innate] && abilities[innate].type;
                        +tooltippedAbilityWithSlot(tooltipSide, innateAbilityType || 'support', innate)
                    each innateStatus in innateStatuses
                        +tooltippedStatus(tooltipSide, statuses[innateStatus])

        td.main-abilities-cell
            .d-flex.flex-column
                if unit.gender === 'Monster'
                    each ability in monsterSkills.getSkillsForMonster(unit.class)
                        +tooltippedAbility(tooltipSide, ability)
                if unit.gender !== 'Monster'
                    each ability in unit.UnitAbilities.filter(a => a.mainOrSub === 'main')
                        +tooltippedAbility(tooltipSide, ability.name)

        td
            .d-flex.flex-column
                if unit.gender !== 'Monster'
                    each ability in unit.UnitAbilities.filter(a => a.mainOrSub === 'sub')
                        +tooltippedAbility(tooltipSide, ability.name)