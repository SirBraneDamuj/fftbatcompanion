mixin unitPortrait(className, gender, side)
    - const fileName = gender === 'Monster' ? className : (className + gender.charAt(0));
    img(class=`unit-portrait-${side}` src=`/images/units/${fileName}.gif`)

mixin unitStats(totalStats, tooltipSide)
    .d-flex.flex-column
        div= `HP: ${totalStats.hp} / MP: ${totalStats.mp}`
        div= `Speed: ${totalStats.speed}`
        div= `Move: ${totalStats.move} / Jump: ${totalStats.jump}`
        div= `PA: ${totalStats.pa} / MA: ${totalStats.ma}`
        div= "Evasion:"
        ul
            li= `C-EV ${totalStats.cEvPercent}%`
            li= `S-EV ${totalStats.sPhysEvPercent}% / ${totalStats.sMagEvPercent}%`
            li= `A-EV ${totalStats.aPhysEvPercent}% / ${totalStats.aMagEvPercent}%`
        if (totalStats.initialStatuses && totalStats.initialStatuses.length > 0)
            div= "Initial:"
            ul
                each status in totalStats.initialStatuses
                    li
                        +tooltip(tooltipSide, statuses[status].info)
                            div= status
        if (totalStats.permStatuses && totalStats.permStatuses.length > 0)
            div= "Permanent:"
            ul
                each status in totalStats.permStatuses
                    li
                        +tooltip(tooltipSide, statuses[status] && statuses[status].info)
                            div= status

mixin tooltip(tooltipSide, tooltipText)
    div(data-toggle="tooltip" data-placement=tooltipSide, title=tooltipText)
        block

mixin tooltippedStatus(tooltipSide, status)
    +tooltip(tooltipSide, status.info)
        .d-inline-flex.align-items-center
            img.ability-icon(src='/images/status.png')
            div= status.name

mixin tooltippedAbility(tooltipSide, ability)
    - const abilityNameDisplay = ability.length > 0 ? ability : '(none)';
    - const abilityInfo = abilities[ability.replace('*', '')] || { name: ability, info: '' };
    - const beastmasterSide = tooltipSide === 'left' ? 'right' : 'left';
    +tooltip(tooltipSide, abilityInfo.info)
        if (ability.includes('*'))
            +tooltip(beastmasterSide, 'Beastmaster Required')
                div= abilityNameDisplay
        else
            div= abilityNameDisplay
    

mixin tooltippedAbilityWithSlot(tooltipSide, slot, ability)
    - const abilityNameDisplay = ability.length > 0 ? ability : '(none)';
    - const abilityInfo = abilities[ability] || { name: ability, info: '' };
    +tooltip(tooltipSide, abilityInfo.info)
        .d-inline-flex.align-items-center
            img.ability-icon(src=`/images/${slot}.png`)
            div= abilityNameDisplay

mixin tooltippedItem(tooltipSide, gear)
    - const gearInfo = items[gear.name] || { name: gear.name, info: '', slot: '' };
    +tooltip(tooltipSide, gearInfo.info)
        .d-inline-flex.align-items-center
            img.ability-icon(src=`/images/${gearInfo.slot}.png`)
            img.gear-icon(src=`/images/items/${gearInfo.name}.png`)
            span= gearInfo.name

mixin unit(side, unit)
    - const tooltipSide = side === 'left' ? 'right' : 'left';
    - const spacelessClassName = unit.class.replace(' ', '');
    - const className = spacelessClassName.startsWith('Calculator') ? 'Calculator' : spacelessClassName;
    - const unitClassInfo = classes[className][unit.gender]
    - const unitItems = unit.UnitEquipments.map((e) => items[e.name]);
    - const totalStats = stats.totalStatsForClassAndEquipment(classes[className][unit.gender].baseStats, unitItems, unit.moveSkill);
    - const activeInnates = unitClassInfo.innates.filter((innate) => innate === 'Jump' || !abilities[innate] && !statuses[innate]);
    - const nonActiveInnates = unitClassInfo.innates.filter((innate) => !statuses[innate] && abilities[innate] && abilities[innate].type !== 'active');
    - const innateStatuses = unitClassInfo.innates.filter((innate) => innate !== 'Jump' && statuses[innate]);
    tr.unit-row
        td
            .d-flex.flex-column
                div= unit.name
                div= unit.gender
                div= `B: ${unit.brave} / F: ${unit.faith}`
                +tooltip(tooltipSide, unitClassInfo.raw)
                    div.font-weight-bold= unit.class
                div= unit.zodiac
                +unitPortrait(className, unit.gender, side)
        td
            +unitStats(totalStats, tooltipSide)
        td
            .d-flex.flex-column
            each gear in unit.UnitEquipments
                +tooltippedItem(tooltipSide, gear)
        td
            .d-flex.flex-column
                if unit.gender !== 'Monster'
                    if activeInnates.length > 0
                        each innate in activeInnates
                            +tooltippedAbilityWithSlot(tooltipSide, 'active', innate)
                    +tooltippedAbilityWithSlot(tooltipSide, 'active', unit.subSkill)
                    +tooltippedAbilityWithSlot(tooltipSide, 'react', unit.reactSkill)
                    +tooltippedAbilityWithSlot(tooltipSide, 'support', unit.supportSkill)
                    +tooltippedAbilityWithSlot(tooltipSide, 'move', unit.moveSkill)
                if nonActiveInnates.length > 0 || innateStatuses.length > 0
                    div.font-weight-bold= "Innates:"
                    each innate in nonActiveInnates
                        - const innateAbilityType = abilities[innate] && abilities[innate].type;
                        +tooltippedAbilityWithSlot(tooltipSide, innateAbilityType || 'support', innate)
                    each innateStatus in innateStatuses
                        +tooltippedStatus(tooltipSide, statuses[innateStatus])

        td.main-abilities-cell
            .d-flex.flex-column
                if unit.gender === 'Monster'
                    each ability in monsterSkills.getSkillsForMonster(unit.class)
                        +tooltippedAbility(tooltipSide, ability)
                if unit.gender !== 'Monster'
                    each ability in unit.UnitAbilities.filter(a => a.mainOrSub === 'main')
                        +tooltippedAbility(tooltipSide, ability.name)

        td
            .d-flex.flex-column
                if unit.gender !== 'Monster'
                    each ability in unit.UnitAbilities.filter(a => a.mainOrSub === 'sub')
                        +tooltippedAbility(tooltipSide, ability.name)